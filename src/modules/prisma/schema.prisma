generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://edston_remote:Lf%2A%24f10%24d2@45.80.70.235:3306/production"
}

model User {
  id                                                       BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  name                                                     String?                @db.VarChar(255)
  email                                                    String                 @unique(map: "users_email_unique") @db.VarChar(255)
  content_language                                         String?                @db.VarChar(5)
  country_code                                             Decimal?               @db.Decimal(5, 0)
  phone                                                    Decimal?               @db.Decimal(15, 0)
  verification_code                                        String?                @db.VarChar(8)
  last_name                                                String?                @db.VarChar(35)
  first_name                                               String?                @db.VarChar(35)
  balance                                                  Float                  @default(0.00)
  balance_usd                                              Float                  @default(0.00)
  bonus_balance                                            Float                  @default(0.00)
  info                                                     String?                @db.LongText
  email_verified_at                                        DateTime?              @db.Timestamp(0)
  password                                                 String                 @db.VarChar(255)
  remember_token                                           String?                @db.VarChar(100)
  created_at                                               DateTime?              @db.Timestamp(0)
  updated_at                                               DateTime?              @db.Timestamp(0)
  provider                                                 String?                @db.VarChar(255)
  provider_id                                              String?                @db.VarChar(255)
  avatar                                                   String?                @db.VarChar(255)
  google_id                                                String?                @db.VarChar(255)
  apple_id                                                 String?                @db.VarChar(255)
  reasons                                                  String?                @db.LongText
  interests                                                String?                @db.LongText
  notification_time                                        DateTime?              @db.Time(0)
  disabled_notifications                                   String?                @db.VarChar(255)
  utm_source                                               String?                @db.VarChar(255)
  year_of_birth                                            Int?                   @db.UnsignedInt
  gender                                                   Int?                   @db.UnsignedTinyInt
  personal_data_hidden                                     Int                    @default(0) @db.UnsignedTinyInt
  stripe_id                                                String?                @db.VarChar(255)
  pm_type                                                  String?                @db.VarChar(255)
  pm_last_four                                             String?                @db.VarChar(4)
  trial_ends_at                                            DateTime?              @db.Timestamp(0)
  authors                                                  authors?               @relation("authorsTousers")
  cancelation_reasons                                      cancelation_reasons[]  @relation("cancelation_reasonsTousers")
  card_user                                                card_user[]            @relation("card_userTousers")
  cards                                                    cards[]                @relation("cardsTousers")
  course_user                                              course_user[]          @relation("course_userTousers")
  Course                                                   Course[]               @relation("coursesTousers")
  device_user                                              device_user[]          @relation("device_userTousers")
  emails                                                   emails[]               @relation("emailsTousers")
  leads                                                    leads[]                @relation("leadsTousers")
  lesson_rating                                            lesson_rating[]        @relation("lesson_ratingTousers")
  notifications                                            notifications[]        @relation("notificationsTousers")
  notifications_v2_notifications_v2_interlocutor_idTousers notifications_v2[]     @relation("notifications_v2_interlocutor_idTousers")
  notifications_v2_notifications_v2_user_idTousers         notifications_v2[]     @relation("notifications_v2_user_idTousers")
  partners                                                 partners?              @relation("partnersTousers")
  payment_methods                                          payment_methods[]      @relation("payment_methodsTousers")
  reflinks                                                 reflinks[]             @relation("reflinksTousers")
  subscriptions                                            subscriptions[]        @relation("subscriptionsTousers")
  testimonials                                             testimonials[]         @relation("testimonialsTousers")
  transactions                                             transactions[]         @relation("transactionsTousers")
  user_requisites_data                                     user_requisites_data[] @relation("user_requisites_dataTousers")
  user_transactions_user_transactions_performed_byTousers  user_transactions[]    @relation("user_transactions_performed_byTousers")
  user_transactions_user_transactions_user_idTousers       user_transactions[]    @relation("user_transactions_user_idTousers")

  @@index([stripe_id], map: "users_stripe_id_index")
  @@map("users")
}

model Course {
  id                                                BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  status                                            Int                    @default(0) @db.TinyInt
  uploading                                         Int                    @default(0) @db.TinyInt
  title                                             String?                @default("undefined") @db.VarChar(255)
  slug                                              String                 @unique(map: "courses_slug_unique") @db.VarChar(255)
  author_id                                         BigInt                 @default(0) @db.UnsignedBigInt
  author_info                                       String                 @db.LongText
  price                                             Int?
  duration                                          String?                @db.VarChar(255)
  excerpt                                           String?                @db.Text
  description                                       String?                @db.LongText
  admin_description                                 String?                @db.LongText
  lang                                              String                 @db.VarChar(2)
  rating                                            Decimal?               @default(0.0) @db.Decimal(2, 1)
  payout_percent                                    Float?
  vimeo_folder                                      String?                @db.VarChar(55)
  cdn_source                                        Int                    @default(0) @db.TinyInt
  created_at                                        DateTime?              @db.Timestamp(0)
  updated_at                                        DateTime?              @db.Timestamp(0)
  User                                              User                   @relation("coursesTousers", fields: [author_id], references: [id], onUpdate: Restrict, map: "courses_author_id_foreign")
  category_course                                   category_course[]      @relation("category_courseTocourses")
  collection_course                                 collection_course[]    @relation("collection_courseTocourses")
  course_currency                                   course_currency[]      @relation("course_currencyTocourses")
  course_discount                                   course_discount[]      @relation("course_discountTocourses")
  course_document                                   course_document[]      @relation("course_documentTocourses")
  course_domain                                     course_domain[]        @relation("course_domainTocourses")
  course_partner                                    course_partner[]       @relation("course_partnerTocourses")
  course_related_course_related_course_idTocourses  course_related[]       @relation("course_related_course_idTocourses")
  course_related_course_related_related_idTocourses course_related[]       @relation("course_related_related_idTocourses")
  course_user                                       course_user[]          @relation("course_userTocourses")
  drafts                                            drafts[]               @relation("coursesTodrafts")
  lessons                                           lessons[]              @relation("coursesTolessons")
  payout_settings_meta                              payout_settings_meta[] @relation("coursesTopayout_settings_meta")
  reflinks                                          reflinks[]             @relation("coursesToreflinks")
  sections                                          sections[]             @relation("coursesTosections")
  statistics                                        statistics[]           @relation("coursesTostatistics")
  testimonials                                      testimonials[]         @relation("coursesTotestimonials")

  @@index([author_id], map: "courses_author_id_foreign")
  @@index([status], map: "courses_status_index")
  @@index([title], map: "search")
  @@map("courses")
}

model app_temp_tokens {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    Int       @db.UnsignedInt
  temp_token String    @db.VarChar(32)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model author_partner {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  partner_id BigInt    @db.UnsignedBigInt
  author_id  BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  authors    authors   @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "author_partner_author_id_foreign")
  partners   partners  @relation(fields: [partner_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "author_partner_partner_id_foreign")

  @@index([author_id], map: "author_partner_author_id_foreign")
  @@index([partner_id], map: "author_partner_partner_id_foreign")
}

model authors {
  id             BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  user_id        BigInt           @unique(map: "authors_user_id_unique") @db.UnsignedBigInt
  has_completed  Int?             @db.SmallInt
  first_theme    String?          @db.Text
  phone          String?          @db.VarChar(255)
  email          String?          @db.VarChar(255)
  requisites     String?          @db.LongText
  social         String?          @db.VarChar(255)
  created_at     DateTime?        @db.Timestamp(0)
  updated_at     DateTime?        @db.Timestamp(0)
  User           User             @relation("authorsTousers", fields: [user_id], references: [id], onUpdate: Restrict, map: "authors_user_id_foreign")
  author_partner author_partner[]
  documents      documents[]
}

model banks {
  id                           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  bank_alias                   String    @unique(map: "banks_bank_alias_unique") @db.VarChar(255)
  bank_name                    String?   @db.VarChar(255)
  bank_local_name              String?   @db.VarChar(255)
  bank_logo_big_original_svg   String?   @db.VarChar(255)
  bank_logo_big_original_png   String?   @db.VarChar(255)
  bank_logo_big_inverted_svg   String?   @db.VarChar(255)
  bank_logo_big_inverted_png   String?   @db.VarChar(255)
  bank_logo_small_original_svg String?   @db.VarChar(255)
  bank_logo_small_original_png String?   @db.VarChar(255)
  bank_logo_small_inverted_svg String?   @db.VarChar(255)
  bank_logo_small_inverted_png String?   @db.VarChar(255)
  bank_color                   String?   @db.VarChar(255)
  bank_country                 String?   @db.VarChar(255)
  bank_site                    String?   @db.VarChar(255)
  bank_phone                   String?   @db.VarChar(255)
  form_background_color        String?   @db.VarChar(255)
  form_background_lightness    String?   @db.VarChar(255)
  form_text_color              String?   @db.VarChar(255)
  form_border_color            String?   @db.VarChar(255)
  form_bank_logo_big_svg       String?   @db.VarChar(255)
  form_bank_logo_big_png       String?   @db.VarChar(255)
  form_bank_logo_small_svg     String?   @db.VarChar(255)
  form_bank_logo_small_png     String?   @db.VarChar(255)
  form_logo_scheme             String?   @db.VarChar(255)
  created_at                   DateTime? @db.Timestamp(0)
  updated_at                   DateTime? @db.Timestamp(0)
  bins                         bins[]
}

model bins {
  id      BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  bin     String @unique(map: "bins_bin_unique") @db.VarChar(255)
  bank_id BigInt @db.UnsignedBigInt
  banks   banks  @relation(fields: [bank_id], references: [id], onUpdate: Restrict, map: "bins_bank_id_foreign")

  @@index([bank_id], map: "bins_bank_id_foreign")
}

model cancelation_reasons {
  id              BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  user_id         BigInt?        @db.UnsignedBigInt
  subscription_id BigInt?        @db.UnsignedBigInt
  reason          String?        @db.Text
  created_at      DateTime?      @db.Timestamp(0)
  updated_at      DateTime?      @db.Timestamp(0)
  subscriptions   subscriptions? @relation(fields: [subscription_id], references: [id], onUpdate: Restrict, map: "cancelation_reasons_subscription_id_foreign")
  User            User?          @relation("cancelation_reasonsTousers", fields: [user_id], references: [id], onUpdate: Restrict, map: "cancelation_reasons_user_id_foreign")

  @@index([subscription_id], map: "cancelation_reasons_subscription_id_foreign")
  @@index([user_id], map: "cancelation_reasons_user_id_foreign")
}

model card_user {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  card_id    BigInt    @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  cards      cards     @relation(fields: [card_id], references: [id], onUpdate: Restrict, map: "card_user_card_id_foreign")
  User       User      @relation("card_userTousers", fields: [user_id], references: [id], onUpdate: Restrict, map: "card_user_user_id_foreign")

  @@index([card_id], map: "card_user_card_id_foreign")
  @@index([user_id], map: "card_user_user_id_foreign")
}

model cards {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  user_id       BigInt          @db.UnsignedBigInt
  first_six     String          @db.VarChar(6)
  last_four     String          @db.VarChar(4)
  provider      String          @db.VarChar(255)
  token         String          @db.Text
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  User          User            @relation("cardsTousers", fields: [user_id], references: [id], onUpdate: Restrict, map: "cards_user_id_foreign")
  card_user     card_user[]
  subscriptions subscriptions[]

  @@index([user_id], map: "cards_user_id_foreign")
}

model categories {
  id                                                        BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  type                                                      Int                 @db.UnsignedTinyInt
  title                                                     String              @db.VarChar(255)
  slug                                                      String              @unique(map: "categories_slug_unique") @db.VarChar(255)
  description                                               String?             @db.MediumText
  text                                                      String?             @db.Text
  h1                                                        String?             @db.VarChar(255)
  menu_title                                                String?             @db.VarChar(255)
  lang                                                      String?             @db.VarChar(4)
  created_at                                                DateTime?           @db.Timestamp(0)
  updated_at                                                DateTime?           @db.Timestamp(0)
  category_children_categoriesTocategory_children_child_id  category_children[] @relation("categoriesTocategory_children_child_id")
  category_children_categoriesTocategory_children_parent_id category_children[] @relation("categoriesTocategory_children_parent_id")
  category_course                                           category_course[]
}

model category_children {
  id                                                 BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  parent_id                                          BigInt     @db.UnsignedBigInt
  child_id                                           BigInt     @db.UnsignedBigInt
  categories_categoriesTocategory_children_child_id  categories @relation("categoriesTocategory_children_child_id", fields: [child_id], references: [id], onUpdate: Restrict, map: "category_children_child_id_foreign")
  categories_categoriesTocategory_children_parent_id categories @relation("categoriesTocategory_children_parent_id", fields: [parent_id], references: [id], onUpdate: Restrict, map: "category_children_parent_id_foreign")

  @@index([child_id], map: "category_children_child_id_foreign")
  @@index([parent_id], map: "category_children_parent_id_foreign")
}

model category_course {
  id          BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  category_id BigInt     @db.UnsignedBigInt
  course_id   BigInt     @db.UnsignedBigInt
  categories  categories @relation(fields: [category_id], references: [id], onUpdate: Restrict, map: "category_course_category_id_foreign")
  Course      Course     @relation("category_courseTocourses", fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "category_course_course_id_foreign")

  @@index([category_id], map: "category_course_category_id_foreign")
  @@index([course_id], map: "category_course_course_id_foreign")
}

model collection_course {
  id            BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  collection_id BigInt      @db.UnsignedBigInt
  course_id     BigInt      @db.UnsignedBigInt
  collections   collections @relation(fields: [collection_id], references: [id], onUpdate: Restrict, map: "collection_course_collection_id_foreign")
  Course        Course      @relation("collection_courseTocourses", fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "collection_course_course_id_foreign")

  @@index([collection_id], map: "collection_course_collection_id_foreign")
  @@index([course_id], map: "collection_course_course_id_foreign")
}

model collections {
  id                BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  title             String              @db.VarChar(255)
  title_2           String              @db.VarChar(255)
  title_3           String?             @db.VarChar(255)
  hide_from         String?             @db.LongText
  created_at        DateTime?           @db.Timestamp(0)
  updated_at        DateTime?           @db.Timestamp(0)
  collection_course collection_course[]
}

model comments {
  id               BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  commenter_id     String?    @db.VarChar(255)
  commenter_type   String?    @db.VarChar(255)
  guest_name       String?    @db.VarChar(255)
  guest_email      String?    @db.VarChar(255)
  commentable_type String     @db.VarChar(255)
  commentable_id   String     @db.VarChar(255)
  comment          String     @db.Text
  approved         Boolean    @default(true)
  child_id         BigInt?    @db.UnsignedBigInt
  deleted_at       DateTime?  @db.Timestamp(0)
  created_at       DateTime?  @db.Timestamp(0)
  updated_at       DateTime?  @db.Timestamp(0)
  comments         comments?  @relation("commentsTocomments", fields: [child_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comments_child_id_foreign")
  other_comments   comments[] @relation("commentsTocomments")

  @@index([child_id], map: "comments_child_id_foreign")
  @@index([commentable_type, commentable_id], map: "comments_commentable_type_commentable_id_index")
  @@index([commenter_id, commenter_type], map: "comments_commenter_id_commenter_type_index")
}

model course_currency {
  id          BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  course_id   BigInt     @db.UnsignedBigInt
  currency_id BigInt     @db.UnsignedBigInt
  price       Decimal    @db.Decimal(15, 2)
  created_at  DateTime?  @db.Timestamp(0)
  updated_at  DateTime?  @db.Timestamp(0)
  Course      Course     @relation("course_currencyTocourses", fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_currency_course_id_foreign")
  currencies  currencies @relation(fields: [currency_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_currency_currency_id_foreign")

  @@index([course_id], map: "course_currency_course_id_foreign")
  @@index([currency_id], map: "course_currency_currency_id_foreign")
}

model course_discount {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  course_id   BigInt    @db.UnsignedBigInt
  discount_id BigInt    @db.UnsignedBigInt
  Course      Course    @relation("course_discountTocourses", fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_discount_course_id_foreign")
  discounts   discounts @relation(fields: [discount_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_discount_discount_id_foreign")

  @@index([course_id], map: "course_discount_course_id_foreign")
  @@index([discount_id], map: "course_discount_discount_id_foreign")
}

model course_document {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  document_id BigInt    @db.UnsignedBigInt
  course_id   BigInt    @db.UnsignedBigInt
  Course      Course    @relation("course_documentTocourses", fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_document_course_id_foreign")
  documents   documents @relation(fields: [document_id], references: [id], onUpdate: Restrict, map: "course_document_document_id_foreign")

  @@index([course_id], map: "course_document_course_id_foreign")
  @@index([document_id], map: "course_document_document_id_foreign")
}

model course_domain {
  id        BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  domain_id BigInt  @db.UnsignedBigInt
  course_id BigInt  @db.UnsignedBigInt
  Course    Course  @relation("course_domainTocourses", fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_domain_course_id_foreign")
  domains   domains @relation(fields: [domain_id], references: [id], onUpdate: Restrict, map: "course_domain_domain_id_foreign")

  @@index([course_id], map: "course_domain_course_id_foreign")
  @@index([domain_id], map: "course_domain_domain_id_foreign")
}

model course_partner {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  partner_id BigInt   @db.UnsignedBigInt
  course_id  BigInt   @db.UnsignedBigInt
  Course     Course   @relation("course_partnerTocourses", fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_partner_course_id_foreign")
  partners   partners @relation(fields: [partner_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_partner_partner_id_foreign")

  @@index([course_id], map: "course_partner_course_id_foreign")
  @@index([partner_id], map: "course_partner_partner_id_foreign")
}

model course_related {
  id                                        BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  course_id                                 BigInt @db.UnsignedBigInt
  related_id                                BigInt @db.UnsignedBigInt
  Course_course_related_course_idTocourses  Course @relation("course_related_course_idTocourses", fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_related_course_id_foreign")
  Course_course_related_related_idTocourses Course @relation("course_related_related_idTocourses", fields: [related_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "course_related_related_id_foreign")

  @@index([course_id], map: "course_related_course_id_foreign")
  @@index([related_id], map: "course_related_related_id_foreign")
}

model course_user {
  id              BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  course_id       BigInt   @db.UnsignedBigInt
  user_id         BigInt   @db.UnsignedBigInt
  position        String?  @db.LongText
  info            String?  @db.LongText
  free            Boolean  @default(false)
  single_purchase Boolean
  subscription_id BigInt?  @db.UnsignedBigInt
  created_at      DateTime @db.DateTime(0)
  updated_at      DateTime @default(now()) @db.Timestamp(0)
  Course          Course   @relation("course_userTocourses", fields: [course_id], references: [id], onUpdate: Restrict, map: "course_user_course_id_foreign")
  User            User     @relation("course_userTousers", fields: [user_id], references: [id], onUpdate: Restrict, map: "course_user_user_id_foreign")

  @@unique([course_id, user_id], map: "course_user_course_id_user_id_unique")
  @@index([user_id], map: "course_user_user_id_foreign")
}

model currencies {
  id                 BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  title              String               @db.VarChar(255)
  iso                String               @unique(map: "currencies_iso_unique") @db.VarChar(5)
  rate               Int                  @default(100) @db.UnsignedInt
  usd_rate           Float
  created_at         DateTime?            @db.Timestamp(0)
  updated_at         DateTime?            @db.Timestamp(0)
  course_currency    course_currency[]
  subscription_plans subscription_plans[]
}

model device_orders {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  device_id  BigInt    @db.UnsignedBigInt
  os         String    @db.VarChar(255)
  type       String    @db.VarChar(255)
  product_id String    @db.VarChar(255)
  course_id  BigInt?   @db.UnsignedBigInt
  receipt    String    @db.LongText
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  devices    devices   @relation(fields: [device_id], references: [id], onUpdate: Restrict, map: "device_orders_device_id_foreign")

  @@index([device_id], map: "device_orders_device_id_foreign")
}

model device_user {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  device_id  BigInt    @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  devices    devices   @relation(fields: [device_id], references: [id], onUpdate: Restrict, map: "device_user_device_id_foreign")
  User       User      @relation("device_userTousers", fields: [user_id], references: [id], onUpdate: Restrict, map: "device_user_user_id_foreign")

  @@index([device_id], map: "device_user_device_id_foreign")
  @@index([user_id], map: "device_user_user_id_foreign")
}

model devices {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  uid           String          @db.VarChar(255)
  fcm_token     String?         @db.VarChar(255)
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  device_orders device_orders[]
  device_user   device_user[]
}

model discounts {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  title           String            @db.VarChar(255)
  type            String            @db.VarChar(255)
  code            String            @unique(map: "discounts_code_unique") @db.VarChar(255)
  status          Boolean           @default(true)
  used            Int               @default(0) @db.UnsignedInt
  max             Int               @default(0) @db.UnsignedInt
  action          String            @db.Char(1)
  value           Int               @db.UnsignedInt
  expires_at      DateTime          @db.DateTime(0)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  course_discount course_discount[]
  orders          orders[]
}

model documents {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  author_id       BigInt            @db.UnsignedBigInt
  type            String            @db.VarChar(255)
  law             String            @db.VarChar(255)
  status          String            @db.VarChar(255)
  parent_id       BigInt            @db.UnsignedBigInt
  number          String?           @db.VarChar(255)
  uuid            String            @unique(map: "documents_uuid_unique") @db.VarChar(255)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  authors         authors           @relation(fields: [author_id], references: [id], onUpdate: Restrict, map: "documents_author_id_foreign")
  course_document course_document[]

  @@index([author_id], map: "documents_author_id_foreign")
}

model domains {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  title         String          @db.VarChar(255)
  domain        String          @db.VarChar(255)
  type          String          @db.VarChar(255)
  fb_pixel      String?         @db.Text
  fb_token      String?         @db.Text
  header        String?         @db.Text
  footer        String?         @db.Text
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  course_domain course_domain[]
}

model drafts {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  course_id  BigInt    @db.UnsignedBigInt
  data       String    @db.LongText
  status     Int       @default(0) @db.TinyInt
  comment    String?   @db.MediumText
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  Course     Course    @relation("coursesTodrafts", fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "drafts_course_id_foreign")

  @@index([course_id], map: "drafts_course_id_foreign")
}

model email_unsubscribed {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  email      String    @unique(map: "email_unsubscribed_email_unique") @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model emails {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  type       String    @db.VarChar(255)
  result     Int       @default(0) @db.TinyInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  User       User      @relation("emailsTousers", fields: [user_id], references: [id], onUpdate: Restrict, map: "emails_user_id_foreign")

  @@index([user_id], map: "emails_user_id_foreign")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model files {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  video_id        BigInt    @db.UnsignedBigInt
  transcoded_path String?   @db.VarChar(255)
  s3              String?   @unique(map: "files_s3_unique") @db.VarChar(255)
  cdn             String?   @db.VarChar(255)
  size            Int?      @db.UnsignedInt
  quality         String?   @db.VarChar(255)
  task_id         String?   @db.VarChar(255)
  task_status     Boolean   @default(false)
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
  videos          videos    @relation(fields: [video_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "files_video_id_foreign")

  @@index([video_id], map: "files_video_id_foreign")
}

model gifts {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  order_id      BigInt?   @db.UnsignedBigInt
  status        Int       @default(0) @db.UnsignedTinyInt
  name          String    @db.VarChar(255)
  email         String    @db.VarChar(255)
  country_code  Decimal?  @db.Decimal(5, 0)
  phone         Decimal?  @db.Decimal(15, 0)
  message       String?   @db.Text
  delivery_date DateTime  @db.DateTime(0)
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  orders        orders?   @relation(fields: [order_id], references: [id], onUpdate: Restrict, map: "gifts_order_id_foreign")

  @@index([order_id], map: "gifts_order_id_foreign")
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.Text
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model jobs_mars {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_mars_queue_index")
}

model jobs_moon {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_moon_queue_index")
}

model jobs_sun {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_sun_queue_index")
}

model jobs_titan {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_titan_queue_index")
}

model jobs_transcoder {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_transcoder_queue_index")
}

model jobs_transfer {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_transfer_queue_index")
}

model leads {
  id                 BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  status             Int                 @db.TinyInt
  type               Int                 @default(0) @db.TinyInt
  for                Int                 @db.UnsignedInt
  order_id           BigInt?             @db.UnsignedBigInt
  user_id            BigInt              @db.UnsignedBigInt
  product_type       String              @db.VarChar(255)
  product_id         BigInt              @db.UnsignedBigInt
  payout_settings_id BigInt?             @db.UnsignedBigInt
  award              Float
  currency           String?             @db.VarChar(5)
  source             String              @db.VarChar(255)
  reflink_id         BigInt?             @db.UnsignedBigInt
  description        String?             @db.VarChar(100)
  created_at         DateTime?           @db.Timestamp(0)
  updated_at         DateTime?           @db.Timestamp(0)
  deleted_at         DateTime?           @db.Timestamp(0)
  orders             orders?             @relation(fields: [order_id], references: [id], onUpdate: Restrict, map: "leads_order_id_foreign")
  payout_settings    payout_settings?    @relation(fields: [payout_settings_id], references: [id], onUpdate: Restrict, map: "leads_payout_settings_id_foreign")
  reflinks           reflinks?           @relation(fields: [reflink_id], references: [id], onUpdate: Restrict, map: "leads_reflink_id_foreign")
  User               User                @relation("leadsTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "leads_user_id_foreign")
  user_transactions  user_transactions[]

  @@index([currency], map: "leads_currency_foreign")
  @@index([order_id], map: "leads_order_id_foreign")
  @@index([payout_settings_id], map: "leads_payout_settings_id_foreign")
  @@index([reflink_id], map: "leads_reflink_id_foreign")
  @@index([user_id], map: "leads_user_id_foreign")
}

model lesson_rating {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  lesson_id  BigInt    @db.UnsignedBigInt
  rating     Int       @db.TinyInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  lessons    lessons   @relation(fields: [lesson_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "lesson_rating_lesson_id_foreign")
  User       User      @relation("lesson_ratingTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "lesson_rating_user_id_foreign")

  @@index([lesson_id], map: "lesson_rating_lesson_id_foreign")
  @@index([user_id], map: "lesson_rating_user_id_foreign")
}

model lessons {
  id                BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  course_id         BigInt          @db.UnsignedBigInt
  section_id        BigInt          @db.UnsignedBigInt
  key               String?         @db.VarChar(255)
  type              String          @db.VarChar(11)
  order             Int             @default(0) @db.UnsignedInt
  is_hidden         Int             @default(0) @db.TinyInt
  rating            Int?            @db.TinyInt
  title             String          @db.VarChar(255)
  description       String?         @db.LongText
  admin_description String?         @db.Text
  text              String?         @db.Text
  links             String?         @db.LongText
  created_at        DateTime?       @db.Timestamp(0)
  updated_at        DateTime?       @db.Timestamp(0)
  Course            Course          @relation("coursesTolessons", fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "lessons_course_id_foreign")
  sections          sections        @relation(fields: [section_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "lessons_section_id_foreign")
  lesson_rating     lesson_rating[]

  @@index([course_id], map: "lessons_course_id_foreign")
  @@index([section_id], map: "lessons_section_id_foreign")
}

model likeable_like_counters {
  id            BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  likeable_id   String @db.VarChar(36)
  likeable_type String @db.VarChar(255)
  count         BigInt @default(0) @db.UnsignedBigInt

  @@unique([likeable_id, likeable_type], map: "likeable_counts")
}

model likeable_likes {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  likeable_id   String    @db.VarChar(36)
  likeable_type String    @db.VarChar(255)
  user_id       String    @db.VarChar(36)
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)

  @@unique([likeable_id, likeable_type, user_id], map: "likeable_likes_unique")
  @@index([user_id], map: "likeable_likes_user_id_index")
}

model media {
  id                    BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  model_type            String    @db.VarChar(255)
  model_id              BigInt    @db.UnsignedBigInt
  uuid                  String?   @unique(map: "media_uuid_unique") @db.Char(36)
  collection_name       String    @db.VarChar(255)
  name                  String    @db.VarChar(255)
  file_name             String    @db.VarChar(255)
  mime_type             String?   @db.VarChar(255)
  disk                  String    @db.VarChar(255)
  conversions_disk      String?   @db.VarChar(255)
  size                  BigInt    @db.UnsignedBigInt
  manipulations         String    @db.LongText
  custom_properties     String    @db.LongText
  generated_conversions String    @db.LongText
  responsive_images     String    @db.LongText
  order_column          Int?      @db.UnsignedInt
  created_at            DateTime? @db.Timestamp(0)
  updated_at            DateTime? @db.Timestamp(0)

  @@index([model_type, model_id], map: "media_model_type_model_id_index")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model model_has_permissions {
  permission_id BigInt      @db.UnsignedBigInt
  model_type    String      @db.VarChar(255)
  model_id      BigInt      @db.UnsignedBigInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "model_has_permissions_permission_id_foreign")

  @@id([permission_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_permissions_model_id_model_type_index")
}

model model_has_roles {
  role_id    BigInt @db.UnsignedBigInt
  model_type String @db.VarChar(255)
  model_id   BigInt @db.UnsignedBigInt
  roles      roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "model_has_roles_role_id_foreign")

  @@id([role_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_roles_model_id_model_type_index")
}

model notification_items {
  id               BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  notification_id  BigInt           @db.UnsignedBigInt
  model_type       String           @db.VarChar(255)
  model_id         BigInt           @db.UnsignedBigInt
  created_at       DateTime?        @db.Timestamp(0)
  updated_at       DateTime?        @db.Timestamp(0)
  notifications_v2 notifications_v2 @relation(fields: [notification_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "notification_items_notification_id_foreign")

  @@index([model_type, model_id], map: "notification_items_model_type_model_id_index")
  @@index([notification_id], map: "notification_items_notification_id_foreign")
}

model notifications {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  type            String    @db.VarChar(255)
  user_id         BigInt    @db.UnsignedBigInt
  interlocutor_id BigInt    @default(0) @db.UnsignedBigInt
  comment_id      BigInt    @default(0) @db.UnsignedBigInt
  reply_id        BigInt    @default(0) @db.UnsignedBigInt
  like_id         BigInt    @default(0) @db.UnsignedBigInt
  status          Int       @default(0) @db.TinyInt
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
  User            User      @relation("notificationsTousers", fields: [user_id], references: [id], onUpdate: Restrict, map: "notifications_user_id_foreign")

  @@index([user_id], map: "notifications_user_id_foreign")
}

model notifications_v2 {
  id                                           BigInt               @id @default(autoincrement()) @db.UnsignedBigInt
  type                                         String               @db.VarChar(255)
  user_id                                      BigInt               @db.UnsignedBigInt
  interlocutor_id                              BigInt               @db.UnsignedBigInt
  notifiable_type                              String               @db.VarChar(255)
  notifiable_id                                BigInt               @db.UnsignedBigInt
  status                                       Int                  @default(0) @db.TinyInt
  created_at                                   DateTime?            @db.Timestamp(0)
  updated_at                                   DateTime?            @db.Timestamp(0)
  User_notifications_v2_interlocutor_idTousers User                 @relation("notifications_v2_interlocutor_idTousers", fields: [interlocutor_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "notifications_v2_interlocutor_id_foreign")
  User_notifications_v2_user_idTousers         User                 @relation("notifications_v2_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "notifications_v2_user_id_foreign")
  notification_items                           notification_items[]

  @@index([interlocutor_id], map: "notifications_v2_interlocutor_id_foreign")
  @@index([notifiable_type, notifiable_id], map: "notifications_v2_notifiable_type_notifiable_id_index")
  @@index([user_id], map: "notifications_v2_user_id_foreign")
}

model oauth_access_tokens {
  id         String    @id @db.VarChar(100)
  user_id    BigInt?   @db.UnsignedBigInt
  client_id  BigInt    @db.UnsignedBigInt
  name       String?   @db.VarChar(255)
  scopes     String?   @db.Text
  revoked    Boolean
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  expires_at DateTime? @db.DateTime(0)

  @@index([user_id], map: "oauth_access_tokens_user_id_index")
}

model oauth_auth_codes {
  id         String    @id @db.VarChar(100)
  user_id    BigInt    @db.UnsignedBigInt
  client_id  BigInt    @db.UnsignedBigInt
  scopes     String?   @db.Text
  revoked    Boolean
  expires_at DateTime? @db.DateTime(0)

  @@index([user_id], map: "oauth_auth_codes_user_id_index")
}

model oauth_clients {
  id                     BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                BigInt?   @db.UnsignedBigInt
  name                   String    @db.VarChar(255)
  secret                 String?   @db.VarChar(100)
  provider               String?   @db.VarChar(255)
  redirect               String    @db.Text
  personal_access_client Boolean
  password_client        Boolean
  revoked                Boolean
  created_at             DateTime? @db.Timestamp(0)
  updated_at             DateTime? @db.Timestamp(0)

  @@index([user_id], map: "oauth_clients_user_id_index")
}

model oauth_personal_access_clients {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  client_id  BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model oauth_refresh_tokens {
  id              String    @id @db.VarChar(100)
  access_token_id String    @db.VarChar(100)
  revoked         Boolean
  expires_at      DateTime? @db.DateTime(0)

  @@index([access_token_id], map: "oauth_refresh_tokens_access_token_id_index")
}

model order_course {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  order_id   BigInt    @db.UnsignedBigInt
  course_id  BigInt    @db.UnsignedBigInt
  price      Float?
  created_at DateTime? @db.DateTime(0)
  orders     orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "order_course_order_id_foreign")

  @@index([order_id], map: "order_course_order_id_foreign")
}

model order_product {
  id                   BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  order_id             BigInt?   @db.UnsignedBigInt
  course_id            BigInt?   @db.UnsignedBigInt
  subscription_plan_id BigInt?   @db.UnsignedBigInt
  trial_days           Int?      @db.UnsignedInt
  price                Float?
  currency             String?   @db.VarChar(4)
  source               Int       @default(0) @db.TinyInt
  created_at           DateTime? @db.Timestamp(0)
  updated_at           DateTime? @db.Timestamp(0)
}

model orders {
  id                   BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  user_id              BigInt?        @db.UnsignedBigInt
  status               String?        @default("0") @db.VarChar(255)
  payment_method       String?        @db.VarChar(255)
  payment_id           String?        @db.VarChar(255)
  payment_message      String?        @db.VarChar(255)
  subscription_id      BigInt?        @db.UnsignedBigInt
  type                 Int?           @default(0) @db.UnsignedInt
  amount               Float?
  currency             String?        @db.VarChar(4)
  amount_usd           Decimal?       @db.Decimal(15, 2)
  new_subscriber       Boolean?       @default(false)
  ty_action            Int            @default(0) @db.TinyInt
  email                String?        @db.VarChar(255)
  domain_id            String?        @db.VarChar(255)
  eds_content_language String?        @db.VarChar(5)
  utm_source           String?        @db.VarChar(255)
  utm_medium           String?        @db.VarChar(255)
  utm_campaign         String?        @db.VarChar(255)
  utm_content          String?        @db.VarChar(255)
  utm_term             String?        @db.VarChar(255)
  receipt              String?        @db.LongText
  created_at           DateTime?      @db.Timestamp(0)
  updated_at           DateTime?      @db.Timestamp(0)
  request              String?        @db.LongText
  reflink_id           BigInt?        @db.UnsignedBigInt
  discount_id          BigInt?        @db.UnsignedBigInt
  split_client_id      BigInt?        @db.UnsignedBigInt
  tp                   String?        @db.VarChar(255)
  gclid                String?        @db.VarChar(255)
  discounts            discounts?     @relation(fields: [discount_id], references: [id], onUpdate: Restrict, map: "orders_discount_id_foreign")
  split_client         split_client?  @relation(fields: [split_client_id], references: [id], onUpdate: Restrict, map: "orders_split_client_id_foreign")
  gifts                gifts[]
  leads                leads[]
  order_course         order_course[]
  reminders            reminders[]

  @@index([discount_id], map: "orders_discount_id_foreign")
  @@index([split_client_id], map: "orders_split_client_id_foreign")
}

model partners {
  id             BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  user_id        BigInt           @unique(map: "partners_user_id_unique") @db.UnsignedBigInt
  code           String           @unique(map: "partners_code_unique") @db.Char(36)
  created_at     DateTime?        @db.Timestamp(0)
  updated_at     DateTime?        @db.Timestamp(0)
  agree          Boolean          @default(false)
  hide           Int              @default(0) @db.TinyInt
  User           User             @relation("partnersTousers", fields: [user_id], references: [id], onUpdate: Restrict, map: "partners_user_id_foreign")
  author_partner author_partner[]
  course_partner course_partner[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model payment_methods {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  type       String    @db.VarChar(255)
  provider   String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  User       User      @relation("payment_methodsTousers", fields: [user_id], references: [id], onUpdate: Restrict, map: "payment_methods_user_id_foreign")

  @@index([user_id], map: "payment_methods_user_id_foreign")
}

model payout_settings {
  id                   BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  product_type         String                 @db.VarChar(255)
  product_id           BigInt                 @db.UnsignedBigInt
  default_percent      Int                    @default(10) @db.UnsignedInt
  referral_percent     Int                    @default(90) @db.UnsignedInt
  payout_type          Int                    @db.UnsignedInt
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  leads                leads[]
  payout_settings_meta payout_settings_meta[]
}

model payout_settings_meta {
  id                 BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  payout_settings_id BigInt          @db.UnsignedBigInt
  percent            Float
  depend_id          BigInt?         @db.UnsignedBigInt
  range              Int?            @db.UnsignedInt
  created_at         DateTime?       @db.Timestamp(0)
  updated_at         DateTime?       @db.Timestamp(0)
  Course             Course?         @relation("coursesTopayout_settings_meta", fields: [depend_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payout_settings_meta_depend_id_foreign")
  payout_settings    payout_settings @relation(fields: [payout_settings_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payout_settings_meta_payout_settings_id_foreign")

  @@index([depend_id], map: "payout_settings_meta_depend_id_foreign")
  @@index([payout_settings_id], map: "payout_settings_meta_payout_settings_id_foreign")
}

model payout_variants {
  id                     BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  title                  String                   @db.VarChar(255)
  status                 Int                      @db.UnsignedTinyInt
  legal_status           Int?                     @db.TinyInt
  withdrawal_fee         String?                  @db.VarChar(255)
  deleted_at             DateTime?                @db.Timestamp(0)
  created_at             DateTime?                @db.Timestamp(0)
  updated_at             DateTime?                @db.Timestamp(0)
  user_requisites_fields user_requisites_fields[]
}

model permissions {
  id                    BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  name                  String                  @db.VarChar(255)
  guard_name            String                  @db.VarChar(255)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  model_has_permissions model_has_permissions[]
  role_has_permissions  role_has_permissions[]
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model receipts {
  id                     BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  billable_id            BigInt    @db.UnsignedBigInt
  billable_type          String    @db.VarChar(255)
  paddle_subscription_id BigInt?   @db.UnsignedBigInt
  checkout_id            String    @db.VarChar(255)
  order_id               String    @unique(map: "receipts_order_id_unique") @db.VarChar(255)
  amount                 String    @db.VarChar(255)
  tax                    String    @db.VarChar(255)
  currency               String    @db.VarChar(3)
  quantity               Int
  receipt_url            String    @unique(map: "receipts_receipt_url_unique") @db.VarChar(255)
  paid_at                DateTime  @default(now()) @db.Timestamp(0)
  created_at             DateTime? @db.Timestamp(0)
  updated_at             DateTime? @db.Timestamp(0)

  @@index([billable_id, billable_type], map: "receipts_billable_id_billable_type_index")
  @@index([paddle_subscription_id], map: "receipts_paddle_subscription_id_index")
}

model reflinks {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  type       Int       @default(1) @db.TinyInt
  user_id    BigInt    @db.UnsignedBigInt
  course_id  BigInt    @db.UnsignedBigInt
  name       String    @db.VarChar(255)
  price      Int?      @db.UnsignedInt
  viewed     BigInt    @default(0) @db.UnsignedBigInt
  copied     BigInt    @default(0) @db.UnsignedBigInt
  code       String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
  Course     Course    @relation("coursesToreflinks", fields: [course_id], references: [id], onUpdate: Restrict, map: "reflinks_course_id_foreign")
  User       User      @relation("reflinksTousers", fields: [user_id], references: [id], onUpdate: Restrict, map: "reflinks_user_id_foreign")
  leads      leads[]

  @@index([course_id], map: "reflinks_course_id_foreign")
  @@index([user_id], map: "reflinks_user_id_foreign")
}

model reminders {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  order_id   BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  orders     orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "reminders_order_id_foreign")

  @@index([order_id], map: "reminders_order_id_foreign")
}

model role_has_permissions {
  permission_id BigInt      @db.UnsignedBigInt
  role_id       BigInt      @db.UnsignedBigInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "role_has_permissions_permission_id_foreign")
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "role_has_permissions_role_id_foreign")

  @@id([permission_id, role_id])
  @@index([role_id], map: "role_has_permissions_role_id_foreign")
}

model roles {
  id                   BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  name                 String                 @db.VarChar(255)
  guard_name           String                 @db.VarChar(255)
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  model_has_roles      model_has_roles[]
  role_has_permissions role_has_permissions[]
}

model sections {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  course_id  BigInt    @db.UnsignedBigInt
  title      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  Course     Course    @relation("coursesTosections", fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "sections_course_id_foreign")
  lessons    lessons[]

  @@index([course_id], map: "sections_course_id_foreign")
}

model service_meta {
  id         BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  meta_key   String @db.VarChar(255)
  meta_value String @db.LongText
}

model split {
  id             BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  description    String         @db.Text
  count          BigInt         @default(0) @db.UnsignedBigInt
  target_percent Int            @default(0) @db.UnsignedInt
  status         Int            @default(0) @db.UnsignedInt
  created_at     DateTime       @db.DateTime(0)
  split_client   split_client[]
}

model split_client {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  client_code String   @db.VarChar(255)
  split_id    BigInt   @db.UnsignedBigInt
  created_at  DateTime @db.DateTime(0)
  split       split    @relation(fields: [split_id], references: [id], onUpdate: Restrict, map: "split_client_split_id_foreign")
  orders      orders[]

  @@index([split_id], map: "split_client_split_id_foreign")
}

model stat_profile_reflinks {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model statistics {
  id        BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  course_id BigInt   @db.UnsignedBigInt
  date      DateTime @db.Date
  data      String   @db.LongText
  type      String   @db.VarChar(20)
  time      Int      @default(0)
  Course    Course   @relation("coursesTostatistics", fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "statistics_course_id_foreign")

  @@unique([course_id, date, type], map: "statistics_course_id_date_unique")
}

model subscription_items {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  subscription_id BigInt    @db.UnsignedBigInt
  stripe_id       String    @unique(map: "subscription_items_stripe_id_unique") @db.VarChar(255)
  stripe_product  String    @db.VarChar(255)
  stripe_price    String    @db.VarChar(255)
  quantity        Int?
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)

  @@unique([subscription_id, stripe_price], map: "subscription_items_subscription_id_stripe_price_unique")
}

model subscription_plans {
  id              BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  title           String          @db.VarChar(255)
  base_price      Float?
  description     String?         @db.Text
  period          String          @db.VarChar(255)
  trial_days      Int             @default(0) @db.UnsignedInt
  price           Decimal         @db.Decimal(15, 2)
  currency_id     BigInt?         @db.UnsignedBigInt
  stripe_price_id String?         @db.VarChar(255)
  status          Int             @default(0) @db.TinyInt
  created_at      DateTime?       @db.Timestamp(0)
  updated_at      DateTime?       @db.Timestamp(0)
  currencies      currencies?     @relation(fields: [currency_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "subscription_plans_currency_id_foreign")
  subscriptions   subscriptions[]

  @@index([currency_id], map: "subscription_plans_currency_id_foreign")
}

model subscriptions {
  id                        BigInt                @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                   BigInt                @db.UnsignedBigInt
  name                      String                @db.VarChar(255)
  payment_method            String?               @db.VarChar(255)
  payment_system_id         String?               @db.VarChar(255)
  status                    Int                   @default(0) @db.TinyInt
  transactions_number       String                @default("0") @db.VarChar(255)
  bonus_transactions_number Int                   @default(0) @db.UnsignedInt
  subscription_plan_id      BigInt?               @db.UnsignedBigInt
  fee                       Float?
  currency                  String?               @db.VarChar(4)
  card_id                   BigInt?               @db.UnsignedBigInt
  stripe_id                 String?               @unique(map: "subscriptions_stripe_id_unique") @db.VarChar(255)
  stripe_status             String?               @db.VarChar(255)
  stripe_price              String?               @db.VarChar(255)
  quantity                  Int?
  trial_ends_at             DateTime?             @db.DateTime(0)
  ends_at                   DateTime?             @db.DateTime(0)
  created_at                DateTime?             @db.DateTime(0)
  updated_at                DateTime?             @db.DateTime(0)
  cards                     cards?                @relation(fields: [card_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "subscriptions_card_id_foreign")
  subscription_plans        subscription_plans?   @relation(fields: [subscription_plan_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "subscriptions_subscription_plan_id_foreign")
  User                      User                  @relation("subscriptionsTousers", fields: [user_id], references: [id], onUpdate: Restrict, map: "subscriptions_user_id_foreign")
  cancelation_reasons       cancelation_reasons[]

  @@index([card_id], map: "subscriptions_card_id_foreign")
  @@index([subscription_plan_id], map: "subscriptions_subscription_plan_id_foreign")
  @@index([user_id], map: "subscriptions_user_id_foreign")
  @@index([user_id, stripe_status], map: "subscriptions_user_id_stripe_status_index")
}

model temporary_uploads {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  session_id String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model testimonials {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  course_id  BigInt    @db.UnsignedBigInt
  user_id    BigInt    @default(0) @db.UnsignedBigInt
  rating     Int       @db.UnsignedTinyInt
  status     Int       @default(0) @db.TinyInt
  name       String?   @db.VarChar(255)
  text       String?   @db.Text
  video      String?   @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  Course     Course    @relation("coursesTotestimonials", fields: [course_id], references: [id], onUpdate: Restrict, map: "testimonials_course_id_foreign")
  User       User      @relation("testimonialsTousers", fields: [user_id], references: [id], onUpdate: Restrict, map: "testimonials_user_id_foreign")

  @@index([course_id], map: "testimonials_course_id_foreign")
  @@index([user_id], map: "testimonials_user_id_foreign")
}

model transactions {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id           BigInt    @db.UnsignedBigInt
  payment_system_id String    @db.VarChar(255)
  payment_method    String    @db.VarChar(255)
  transaction_id    String    @db.VarChar(255)
  amount            Float     @default(0) @db.Float
  currency          String?   @db.VarChar(255)
  status            Int       @db.TinyInt
  purchase_date     DateTime  @db.DateTime(0)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  User              User      @relation("transactionsTousers", fields: [user_id], references: [id], onUpdate: Restrict, map: "transactions_user_id_foreign")

  @@index([user_id], map: "transactions_user_id_foreign")
}

model transactions_sync {
  id                  BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  payment_method      String    @db.VarChar(255)
  date                DateTime  @db.Date
  status              Int       @db.TinyInt
  transactions_number Int       @db.UnsignedInt
  created_at          DateTime? @db.Timestamp(0)
  updated_at          DateTime? @db.Timestamp(0)
}

model user_requisites_data {
  id                     BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                BigInt                 @db.UnsignedBigInt
  field_id               BigInt                 @db.UnsignedBigInt
  field_value            String                 @db.Text
  created_at             DateTime?              @db.Timestamp(0)
  updated_at             DateTime?              @db.Timestamp(0)
  user_requisites_fields user_requisites_fields @relation(fields: [field_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_requisites_data_field_id_foreign")
  User                   User                   @relation("user_requisites_dataTousers", fields: [user_id], references: [id], onUpdate: Restrict, map: "user_requisites_data_user_id_foreign")

  @@index([field_id], map: "user_requisites_data_field_id_foreign")
  @@index([user_id], map: "user_requisites_data_user_id_foreign")
}

model user_requisites_fields {
  id                     BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  payout_variant_id      BigInt?                 @db.UnsignedBigInt
  requisites_legal_id    BigInt?                 @db.UnsignedBigInt
  key                    String                  @db.VarChar(255)
  label                  String                  @db.VarChar(255)
  created_at             DateTime?               @db.Timestamp(0)
  updated_at             DateTime?               @db.Timestamp(0)
  payout_variants        payout_variants?        @relation(fields: [payout_variant_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_requisites_fields_payout_variant_id_foreign")
  user_requisites_legals user_requisites_legals? @relation(fields: [requisites_legal_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "user_requisites_fields_requisites_legal_id_foreign")
  user_requisites_data   user_requisites_data[]

  @@index([payout_variant_id], map: "user_requisites_fields_payout_variant_id_foreign")
  @@index([requisites_legal_id], map: "user_requisites_fields_requisites_legal_id_foreign")
}

model user_requisites_legals {
  id                     BigInt                   @id @default(autoincrement()) @db.UnsignedBigInt
  title                  String                   @db.VarChar(255)
  status                 Int                      @db.UnsignedTinyInt
  order                  Int                      @default(0) @db.UnsignedInt
  deleted_at             DateTime?                @db.Timestamp(0)
  created_at             DateTime?                @db.Timestamp(0)
  updated_at             DateTime?                @db.Timestamp(0)
  user_requisites_fields user_requisites_fields[]
}

model user_transactions {
  id                                         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  type                                       Int       @default(1) @db.UnsignedTinyInt
  user_id                                    BigInt?   @db.UnsignedBigInt
  lead_id                                    BigInt?   @db.UnsignedBigInt
  value                                      Float
  currency                                   String?   @db.VarChar(5)
  performed_by                               BigInt?   @db.UnsignedBigInt
  comment                                    String?   @db.VarChar(500)
  lead_created_at                            DateTime? @db.DateTime(0)
  created_at                                 DateTime? @db.Timestamp(0)
  updated_at                                 DateTime? @db.Timestamp(0)
  leads                                      leads?    @relation(fields: [lead_id], references: [id], onUpdate: Restrict, map: "user_transactions_lead_id_foreign")
  User_user_transactions_performed_byTousers User?     @relation("user_transactions_performed_byTousers", fields: [performed_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_transactions_performed_by_foreign")
  User_user_transactions_user_idTousers      User?     @relation("user_transactions_user_idTousers", fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "user_transactions_user_id_foreign")

  @@index([lead_id], map: "user_transactions_lead_id_foreign")
  @@index([performed_by], map: "user_transactions_performed_by_foreign")
  @@index([user_id], map: "user_transactions_user_id_foreign")
}

model videos {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  model_type  String   @db.VarChar(255)
  model_id    BigInt   @db.UnsignedBigInt
  duration    Int      @default(0) @db.UnsignedInt
  cdn_player  String?  @db.VarChar(255)
  screenshot  String?  @db.VarChar(255)
  type        String   @db.VarChar(55)
  task_status Boolean  @default(false)
  created_at  DateTime @db.DateTime(0)
  files       files[]

  @@index([model_type, model_id], map: "videos_model_type_model_id_index")
}
